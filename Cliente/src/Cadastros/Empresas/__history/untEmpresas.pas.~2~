unit untEmpresas;

interface

uses
  IdHTTP, System.JSON, System.Classes, System.SysUtils, Vcl.DBGrids;

type
  TEmpresa = class
  private
    FRazaoSocial: String;
    FNomeFantasia: string;
    FCPF_CNPJ: string;
    FInscEstadual: string;
    FTelefone: string;
    FCEP: string;
    FLogradouro: string;
    FNumero: integer;
    FBairro: string;
    FCidade: string;
    FUF: string;
    FIDAtualizarEmpresa: integer;
    HTTP: TIDHTTP;
    JSON: TJSONObject;
    Stream: TStream;

    function validaCPF(CPF: string): boolean;
    function validaCNPJ(CNPJ: string): boolean;
  public
    lib: boolean;
    property RazaoSocial: string read FRazaoSocial write FRazaoSocial;
    property NomeFantasia: string read FNomeFantasia write FNomeFantasia;
    property CPF_CNPJ: string write FCPF_CNPJ;
    property InscEstadual: string write FInscEstadual;
    property Telefone: string write FTelefone;
    property CEP: string write FCEP;
    property Logradouro: string write FLogradouro;
    property Numero: integer write FNumero;
    property Bairro: string write FBairro;
    property Cidade: string write FCidade;
    property UF: string write FUF;
    property IDAtualizarEmpresa: integer read FIDAtualizarEmpresa write FIDAtualizarEmpresa;

    function setDados: string;
    constructor Create;
  end;

implementation

constructor TEmpresa.Create;
begin
  HTTP := TIDHTTP.Create(nil);
  JSON := TJSONObject.Create;
end;

function TEmpresa.setDados: string;
begin
  try
    FCPF_CNPJ := StringReplace(FCPF_CNPJ, '.', '', [rfReplaceAll]);
    FCPF_CNPJ := StringReplace(FCPF_CNPJ, '/', '', [rfReplaceAll]);
    FCPF_CNPJ := StringReplace(FCPF_CNPJ, '-', '', [rfReplaceAll]);

    if validaCPF(FCPF_CNPJ) or validaCNPJ(FCPF_CNPJ) then
    begin
      JSON.AddPair('razaosocial', FRazaoSocial);
      JSON.AddPair('nomefantasia', FNomeFantasia);
      JSON.AddPair('cpf_cnpj', FCPF_CNPJ);
      JSON.AddPair('insc_estadual', FInscEstadual);
      JSON.AddPair('telefone', FTelefone);
      JSON.AddPair('cep', FCEP);
      JSON.AddPair('logradouro', FLogradouro);
      JSON.AddPair('numero', FNumero.ToString);
      JSON.AddPair('bairro', FBairro);
      JSON.AddPair('cidade', FCidade);
      JSON.AddPair('uf', FUF);
      JSON.AddPair('tabelaBanco', 'tab_empresas');

      Stream := TStringStream.Create(JSON.ToJSON);
      HTTP.Request.ContentType := 'application/json';

      if FIDAtualizarEmpresa = 0 then
      begin
        HTTP.Post('http://localhost:9000/empresas/inserir', Stream);
        Result := 'Empresa cadastrada com sucesso.';
      end
      else
      begin
        HTTP.Put('http://localhost:9000/empresas/atualizar/' + FIDAtualizarEmpresa.ToString, Stream);
        Result := 'Dados atualizados com sucesso.';
      end;

      lib := true;
    end
    else
    begin
      Result := 'CPF/CNPJ Inválido!';
      lib := false;
    end;
  except on E: Exception do
    begin
      Result := 'Erro de servidor!';
      lib := false;
    end;
  end;
end;

function TEmpresa.validaCPF(CPF: string): boolean;
var
  digito10, digito11: string;
  s, I, r, peso: integer;
begin
  if ((CPF = '00000000000') or (CPF = '11111111111') or (CPF = '22222222222') or
    (CPF = '33333333333') or (CPF = '44444444444') or (CPF = '55555555555') or
    (CPF = '66666666666') or (CPF = '77777777777') or (CPF = '88888888888') or
    (CPF = '99999999999') or (length(CPF) <> 11)) then
  begin
    result := false;
    exit;
  end;

  try
    // calculo do primeiro dígito
    s := 0;
    peso := 10;

    for I := 1 to 9 do
    begin
      s := s + (StrToInt(CPF[I]) * peso);
      peso := peso - 1;
    end;

    r := 11 - (s mod 11);

    if (r = 10) or (r = 11) then
      digito10 := '0'
    else
      str(r: 1, digito10);

    // calculo do segundo dígito
    s := 0;
    peso := 11;

    for I := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[I]) * peso);
      peso := peso - 1;
    end;

    r := 11 - (s mod 11);

    if (r = 10) or (r = 11) then
      digito11 := '0'
    else
      str(r: 1, digito11);

    // verifica se os digitos calculados conferem com os digitos informados
    if ((digito10 = CPF[10]) and (digito11 = CPF[11])) then
      result := true
    else
      result := false;
  except
    result := false
  end;
end;

function TEmpresa.validaCNPJ(CNPJ: string): boolean;
var
  digito13, digito14: string;
  sm, I, r, peso: integer;
begin
  if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
    (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
    (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
    (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
    (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
    (length(CNPJ) <> 14)) then
  begin
    result := false;
    exit;
  end;

  try
    //calculo do primeiro dígito
    sm := 0;
    peso := 2;

    for I := 12 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[I]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;

    r := sm mod 11;

    if (r = 0) or (r = 1) then
      digito13 := '0'
    else
      str((11 - r): 1, digito13);

    //calculo do segundo dígito
    sm := 0;
    peso := 2;

    for I := 13 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[I]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;

    r := sm mod 11;

    if (r = 0) or (r = 1) then
      digito14 := '0'
    else
      str((11 - r): 1, digito14);

    // verifica se os digitos calculados conferem com os digitos informados
    if ((digito13 = CNPJ[13]) and (digito14 = CNPJ[14])) then
      result := true
    else
      result := false;
  except
    result := false
  end;
end;

end.
